---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "../consts";
import { Image } from "astro:assets";

type Props = { title?: string; description?: string; hero_image?: string };

const { title, description, hero_image } = Astro.props;
console.log(hero_image);
---

<html lang="en">
  <head>
    <BaseHead
      title={title ?? SITE_TITLE}
      description={description ?? SITE_DESCRIPTION}
    />
  </head>

  <body>
    <div style={{ position: "relative" }}>
      <Header />
      <main>
        {
          hero_image && (
            <div class="heading">
              <video
                style={{
                  width: "100%",
                }}
                src="BIGMOVIE.mp4"
                autoplay
                muted
                loop
              />
            </div>
          )
        }

        <div style={!hero_image ? { top: 0 } : {}} class="floater">
          <hr
            style={{
              width: `${import.meta.env.HEADER.length}ch`,
              left: `calc(50% - ${import.meta.env.HEADER.length}ch / 2)`,
            }}
            id="deez"
            class={!hero_image ? "stuck" : ""}
          />
          <h1 id="HEADER" class={`stick ${!hero_image ? "very-solid" : ""}`}>
            <span>Dotwork Pete</span>
          </h1>
        </div>
        <br />
        {!hero_image && description && <p id="DESCRIPTION">{description}</p>}
        <div class={`spacer ${hero_image ? "hide" : ""}`}>
          <br />
          <br />
          <br />

          {
            description && (
              <>
                <hr />
                <br />
              </>
            )
          }
        </div>
        <div style={{ padding: "0 0.75rem" }}>
          <slot />
        </div>
      </main>
      <Footer />
    </div>
    <div id="admin-portal" class="hide"></div>
    <div id="cursor-container">
      <div id="cursor"></div>
    </div>
  </body>
</html>

<script>
  const el = document.getElementById("deez")!;
  window.addEventListener("scroll", () => {
    const stickyTop = parseInt(window.getComputedStyle(el).top);
    const currentTop = el.getBoundingClientRect().top;
    el.classList.toggle("stuck", currentTop === stickyTop);
  });

  const IS_IOS =
    /iPad|iPhone|iPod/.test(navigator.userAgent) &&
    (!Object.hasOwn(window, "MSStream") || !(window as any).MSStream);

  if (!IS_IOS) {
    const cursor = document.getElementById("cursor")!;

    window.addEventListener(
      "mousemove",
      () => (cursor.style.display = "block"),
      {
        once: true,
      },
    );

    let last: string;
    window.addEventListener("dragend", (event) => {
      if (event.button !== 0) return;

      cursor.style.transform = last;
    });
    window.addEventListener("mouseup", (event) => {
      if (event.button !== 0) return;

      cursor.style.transform = last;
    });
    window.addEventListener("mousedown", (event) => {
      if (event.button !== 0) return;

      last = cursor.style.transform;
      cursor.style.transform = "rotate(-30deg)";
    });
    window.addEventListener(
      "contextmenu",
      () => (cursor.style.transform = last),
    );

    const move = (event: MouseEvent) => {
      cursor.style.top = event.clientY - 15 + "px";
      cursor.style.left = event.clientX - 2 + "px";
    };
    document.documentElement.addEventListener("mousemove", move);
    document.documentElement.addEventListener("drag", move);
    document.documentElement.addEventListener(
      "mouseleave",
      () => (cursor.style.display = "none"),
    );
    document.documentElement.addEventListener(
      "mouseenter",
      () => (cursor.style.display = "block"),
    );
  } else document.getElementById("cursor-container")!.style.display = "none";

  //   window
  //     .matchMedia("(prefers-color-scheme: dark)")
  //     .addEventListener("change", ({ matches: isDark }) => {
  //       const newTheme = isDark ? "dark" : "light";
  //       document.documentElement.dataset.theme = newTheme;
  //       localStorage.setItem("theme", newTheme);
  //     });
  console.log(document.cookie);
  const bag = document.getElementById("bag")!;
  const res = await fetch("/checkout/api/bag");
  if (res.ok) {
    const currentBag = await res.json();
    console.log("what", currentBag);
    //   const bag = localStorage.getItem("dotwork-bag");
    //   if (!bag || bag === "undefined")
    localStorage.setItem("dotwork-bag", JSON.stringify(currentBag));
    const temp = JSON.parse(localStorage.getItem("dotwork-bag")!);
    if (Array.isArray(temp))
      bag.dataset.quantity = temp.reduce(
        (acc: number, curr: any) => acc + curr.quantity,
        0,
      );
  }
</script>

<style>
  main {
    position: relative;
  }
  #cursor-container {
    position: fixed;
    top: 0;
    left: 0;
    max-height: 100vh;
    max-width: 100vw;
    z-index: 1000000;
    pointer-events: none;
    background: red !important;
  }
  .heading {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    height: 30rem;
    overflow: hidden;
    z-index: 9;
  }
  video {
    position: absolute;
    top: -10rem;
    z-index: 5;
  }
  .heading > div {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: absolute;
    top: 45%;
  }
  .heading > img {
    width: 100%;
  }
  .heading canvas {
    /* content: ""; */
    position: absolute;
    top: 0;
    left: 0;
    /* right: 0;
    bottom: 0; */
    /* background-color: red !important; */
  }

  #DESCRIPTION {
    text-align: center;
    position: relative;
    z-index: 3;
  }
  .stick {
    position: sticky;
    top: 3.35rem;
    z-index: 1000;
  }
  #HEADER {
    /* position: absolute; */
    top: 1.25rem;
    /* background-color: var(--primary); */
    padding: 0 1rem;
    z-index: 100000;
    border-radius: 19rem;
    width: fit-content;
    /* color: var(--primary) */
  }
  /* #HEADER::before {
    content: "";
    position: absolute;
    background-color: var(--primary);
    height: 0.125rem;
    left: -0.25rem;
    top: 49%;
    width: 100%;
	z-index: 0;
  } */
  hr {
    width: 100%;
  }
  hr#deez {
    position: sticky;
    top: 3rem;
    z-index: 100;
    border-color: transparent;
    font-size: 2.65rem;
  }
  hr#deez.stuck {
    border-color: var(--primary);
  }

  .floater {
    position: absolute;
    height: 90%;
    width: 100%;
    top: 14rem;
    pointer-events: none;
  }
</style>
